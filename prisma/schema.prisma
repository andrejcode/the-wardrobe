generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Gender {
  MALE
  FEMALE
  UNISEX
  // OTHER
}

enum Size {
  S
  M
  L
  XL
}

enum Color {
  RED
  BLUE
  GREEN
  YELLOW
  BLACK
  WHITE
  PINK
  PURPLE
  BROWN
  GRAY
  ORANGE
}

model Category {
  id            Int            @id @default(autoincrement())
  name          String
  gender        Gender
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  clothing      ClothingItem[]
  subcategories Subcategory[]
}

model Subcategory {
  id         Int            @id @default(autoincrement())
  name       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  category   Category       @relation(fields: [categoryId], references: [id])
  categoryId Int
  clothing   ClothingItem[]
}

model ClothingItem {
  id                 Int                 @id @default(autoincrement())
  name               String
  gender             Gender
  description        String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  category           Category            @relation(fields: [categoryId], references: [id])
  categoryId         Int
  subcategory        Subcategory?        @relation(fields: [subcategoryId], references: [id])
  subcategoryId      Int?
  clothingVariations ClothingVariation[]
  wishlist           Wishlist[]
}

model ClothingVariation {
  id             Int          @id @default(autoincrement())
  color          Color
  imageUrl       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  clothingItem   ClothingItem @relation(fields: [clothingItemId], references: [id])
  clothingItemId Int
  inventory      Inventory[]
}

model Inventory {
  id                  Int               @id @default(autoincrement())
  size                Size
  quantity            Int
  priceInCents        Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  clothingVariation   ClothingVariation @relation(fields: [clothingVariationId], references: [id])
  clothingVariationId Int
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  role          String          @default("user")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wishlist Wishlist[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Wishlist {
  id           Int          @default(autoincrement())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  clothingItem ClothingItem @relation(fields: [clothingId], references: [id])
  clothingId   Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@id([userId, clothingId])
}

model StripeSession {
  id        Int      @id @default(autoincrement())
  sessionId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
